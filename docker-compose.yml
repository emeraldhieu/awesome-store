version: '3.5'

services:
  postgres:
    image: postgres:15.1-alpine
    hostname: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/data/postgres
      # Create multiple databases with users upon starting
      # See https://github.com/mrts/docker-postgresql-multiple-databases#using-multiple-databases-with-the-official-postgresql-docker-image
      # Remember to grant execution to your script: "chmod +x <yourScript>"
      - ./postgres-scripts:/docker-entrypoint-initdb.d
    networks:
      - backend
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
      POSTGRES_MULTIPLE_DATABASES: "product"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.1
    hostname: zookeeper
    # Enable this in Mac Book Pro M1
    #platform: linux/x86_64
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-transaction-logs:/var/lib/zookeeper/log
    networks:
      - backend
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.1.1
    hostname: kafka1
    # Enable this in Mac Book Pro M1
    #platform: linux/x86_64
    ports:
      - "9092:9092"
    volumes:
      - kafka1-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - backend
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka1:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    ports:
      - "8081:8081"
    depends_on:
      - zookeeper
      - kafka1
    networks:
      - backend
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka1:29092,kafka2:29093"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_URL: "http://localhost:8081"

  product:
    build:
      context: product
      dockerfile: Dockerfile
    image: product:1.0-SNAPSHOT
    ports:
      - 50001:8080
    depends_on:
      postgres:
        condition: service_healthy
      kafka1:
        condition: service_started
    networks:
      - backend

  consumer:
    build:
      context: consumer
      dockerfile: Dockerfile
    image: consumer:1.0-SNAPSHOT
    ports:
      - 50002:8080
    depends_on:
      postgres:
        condition: service_healthy
      kafka1:
        condition: service_started
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres:
  zookeeper-data:
  zookeeper-transaction-logs:
  kafka1-data:

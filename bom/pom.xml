<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.emeraldhieu.awesomestore</groupId>
    <artifactId>bom</artifactId>
    <name>Bill of Materials</name>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <properties>
        <!-- Used by maven-compiler-plugin if source and target are not configured -->
        <maven.compiler.source>${javaVersion}</maven.compiler.source>
        <maven.compiler.target>${javaVersion}</maven.compiler.target>
        <maven.compiler.release>${javaVersion}</maven.compiler.release>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
        <resourceDelimiter>@</resourceDelimiter>

        <!-- Test report configs -->
        <testResultDirectory>${project.build.directory}/testResults</testResultDirectory>
        <unitTestReportDirectory>${testResultDirectory}/unitTests</unitTestReportDirectory>
        <integrationTestReportDirectory>${testResultDirectory}/integrationTests</integrationTestReportDirectory>

        <!-- Usage:
            mvn clean install -DskipTests
            mvn clean install -DskipUnitTests
            mvn clean install -DskipIntegrationTests
        -->
        <skipTests>false</skipTests>
        <skipUnitTests>${skipTests}</skipUnitTests>
        <skipIntegrationTests>${skipTests}</skipIntegrationTests>

        <!-- Versions. -->
        <javaVersion>17</javaVersion>
        <springBootVersion>3.0.0</springBootVersion>
        <springDocOpenApiUiVersion>1.6.9</springDocOpenApiUiVersion>
        <mavenResourcesPluginVersion>3.2.0</mavenResourcesPluginVersion>
        <mavenSurefirePluginVersion>2.22.2</mavenSurefirePluginVersion>
        <mavenFailsafePluginVersion>2.22.2</mavenFailsafePluginVersion>
        <jacocoMavenPluginVersion>0.8.8</jacocoMavenPluginVersion>
        <mavenCompilerPluginVersion>3.10.1</mavenCompilerPluginVersion>
        <nettyResolverDnsNativeMacosVersion>4.1.82.Final</nettyResolverDnsNativeMacosVersion>
        <lombokVersion>1.18.24</lombokVersion>
        <mapstructVersion>1.5.2.Final</mapstructVersion>
        <openApiGeneratorMavenPluginVersion>6.0.1</openApiGeneratorMavenPluginVersion>
        <lombokMapstructBindingVersion>0.2.0</lombokMapstructBindingVersion>
        <liquibaseSlf4jVersion>4.1.0</liquibaseSlf4jVersion>
        <springDocOpenApiStarterWebMvcUiVersion>2.0.0</springDocOpenApiStarterWebMvcUiVersion>
        <hibernateTypeVersion>2.20.0</hibernateTypeVersion>
        <kafkaAvroSerializerVersion>7.3.0</kafkaAvroSerializerVersion>
        <avroMavenPluginVersion>1.11.1</avroMavenPluginVersion>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--
                Import Spring Boot dependency management.
                See https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#using.import
            -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${springBootVersion}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--
                Deploy Swagger UI to Spring Boot application.
                See https://springdoc.org/#getting-started
            -->
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-ui</artifactId>
                <version>${springDocOpenApiUiVersion}</version>
            </dependency>

            <!--
                Fix "Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider,
                fallback to system defaults. This may result in incorrect DNS resolutions on MacOS." on Apple M1
                See https://stackoverflow.com/questions/65954571/spring-boot-2-4-2-dns-resolution-problem-at-start-on-apple-m1#66471176
            -->
            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-resolver-dns-native-macos</artifactId>
                <version>${nettyResolverDnsNativeMacosVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombokVersion}</version>
            </dependency>

            <!-- Create mappers -->
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId>
                <version>${mapstructVersion}</version>
            </dependency>

            <!-- Use @JsonNullable for Open API -->
            <dependency>
                <groupId>org.openapitools</groupId>
                <artifactId>jackson-databind-nullable</artifactId>
                <version>${jacksonDatabindNullableVersion}</version>
            </dependency>

            <!--
                Log Liquibase
                See https://stackoverflow.com/questions/20880783/how-to-get-liquibase-to-log-using-slf4j#20880784
            -->
            <dependency>
                <groupId>com.mattbertolini</groupId>
                <artifactId>liquibase-slf4j</artifactId>
                <version>${liquibaseSlf4jVersion}</version>
            </dependency>

            <!-- Open API and Swagger UI -->
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
                <version>${springDocOpenApiStarterWebMvcUiVersion}</version>
            </dependency>

            <!-- Use "org.apache.avro.specific" and "org.apache.avro.message". -->
            <dependency>
                <groupId>io.confluent</groupId>
                <artifactId>kafka-avro-serializer</artifactId>
                <version>${kafkaAvroSerializerVersion}</version>
            </dependency>

            <!--
                Use Spring Boot gRPC Server.
                See https://yidongnan.github.io/grpc-spring-boot-starter/en/server/getting-started.html#maven-server
            -->
            <dependency>
                <groupId>net.devh</groupId>
                <artifactId>grpc-server-spring-boot-starter</artifactId>
                <version>${grpcSpringBootStarterVersion}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <!--
                    Repackage jar file into executable jar.
                    See https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#packaging
                 -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${springBootVersion}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <mainClass>${start-class}</mainClass>
                        <excludes>
                            <exclude>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                            </exclude>
                        </excludes>
                    </configuration>
                </plugin>

                <!--
                    Sensible resource filtering for application.properties and application.yml including profile-specific files.
                    See https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${mavenResourcesPluginVersion}</version>
                    <configuration>
                        <delimiters>
                            <delimiter>${resourceDelimiter}</delimiter>
                        </delimiters>
                        <useDefaultDelimiters>false</useDefaultDelimiters>
                    </configuration>
                </plugin>

                <!-- Configure unit tests. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${mavenSurefirePluginVersion}</version>
                    <configuration>
                        <!-- Force alphabetical product to have a reproducible build -->
                        <runOrder>alphabetical</runOrder>
                        <!-- Fixes a bug which will be solved in next version after 2.22.1 then this can be removed -->
                        <!-- see: https://issues.apache.org/jira/browse/SUREFIRE-1588 -->
                        <useSystemClassLoader>false</useSystemClassLoader>
                        <reportsDirectory>${unitTestReportDirectory}</reportsDirectory>
                        <skipTests>${skipUnitTests}</skipTests>
                        <!-- Disable spring cloud k8s in unit test -->
                        <systemPropertyVariables>
                            <spring.cloud.kubernetes.enabled>false</spring.cloud.kubernetes.enabled>
                        </systemPropertyVariables>
                        <excludes>
                            <exclude>**/*IntegrationTest</exclude>
                        </excludes>
                    </configuration>
                </plugin>

                <!-- Configure integration tests -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${mavenFailsafePluginVersion}</version>
                    <configuration>
                        <!-- Due to spring-boot repackage, without adding this property test classes are not found
                             See https://github.com/spring-projects/spring-boot/issues/6254 -->
                        <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                        <!-- Force alphabetical product to have a reproducible build -->
                        <runOrder>alphabetical</runOrder>
                        <reportsDirectory>${integrationTestReportDirectory}</reportsDirectory>
                        <includes>
                            <include>**/*IT*</include>
                            <include>**/*IntegrationTest</include>
                            <include>**/*IntTest*</include>
                            <include>**/*CucumberIT*</include>
                        </includes>
                        <skipTests>${skipIntegrationTests}</skipTests>
                    </configuration>
                    <executions>
                        <execution>
                            <id>integration-test</id>
                            <goals>
                                <goal>integration-test</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>verify</id>
                            <goals>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${mavenCompilerPluginVersion}</version>
                    <configuration>
                        <source>${javaVersion}</source>
                        <target>${javaVersion}</target>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.mapstruct</groupId>
                                <artifactId>mapstruct-processor</artifactId>
                                <version>${mapstructVersion}</version>
                            </path>
                            <!-- Recognize Lombok annotations upon build -->
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombokVersion}</version>
                            </path>
                            <!--
                                Use Lombok's builder inside mapstruct's mapperImpl.
                                See https://stackoverflow.com/questions/65955000/how-to-instruct-mapstruct-to-use-lombok-builder#65955495
                                See https://github.com/projectlombok/lombok/issues/1538#issuecomment-729651302
                            -->
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok-mapstruct-binding</artifactId>
                                <version>${lombokMapstructBindingVersion}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>

                <plugin>
                    <!--
                        Generate API code based on Open API Specifications file.
                        Default phase is "generate-sources" phase.
                        See https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin
                    -->
                    <groupId>org.openapitools</groupId>
                    <artifactId>openapi-generator-maven-plugin</artifactId>
                    <version>${openApiGeneratorMavenPluginVersion}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>generate</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Generate Avro's message models based on template files. -->
                <plugin>
                    <groupId>org.apache.avro</groupId>
                    <artifactId>avro-maven-plugin</artifactId>
                    <version>${avroMavenPluginVersion}</version>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
        </plugins>

<!--        <extensions>-->
<!--            &lt;!&ndash; Extension for private S3 Maven repository. &ndash;&gt;-->
<!--            <extension>-->
<!--                <groupId>com.github.seahen</groupId>-->
<!--                <artifactId>maven-s3-wagon</artifactId>-->
<!--                <version>${mavenS3WagonVersion}</version>-->
<!--            </extension>-->

<!--            &lt;!&ndash;-->
<!--                Used for Spring Boot gRPC.-->
<!--                See https://yidongnan.github.io/grpc-spring-boot-starter/en/server/getting-started.html#maven-interface-->
<!--            &ndash;&gt;-->
<!--            <extension>-->
<!--                <groupId>kr.motd.maven</groupId>-->
<!--                <artifactId>os-maven-plugin</artifactId>-->
<!--                <version>${osMavenPluginVersion}</version>-->
<!--            </extension>-->
<!--        </extensions>-->
    </build>

    <repositories>
<!--        &lt;!&ndash; Used for spring-cloud-sleuth-otel-dependencies &ndash;&gt;-->
<!--        <repository>-->
<!--            <id>spring-milestones</id>-->
<!--            <url>https://repo.spring.io/milestone</url>-->
<!--        </repository>-->
        <!-- Apache Avro for versioning message schema -->
        <repository>
            <id>confluent</id>
            <url>https://packages.confluent.io/maven/</url>
        </repository>
    </repositories>

    <profiles>
        <profile>
            <id>coverage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${jacocoMavenPluginVersion}</version>
                        <executions>
                            <execution>
                                <id>prepare-agent</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>report</id>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                                <configuration>
                                    <formats>
                                        <format>XML</format>
                                    </formats>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>